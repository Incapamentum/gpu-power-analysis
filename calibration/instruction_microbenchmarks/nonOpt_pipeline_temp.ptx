/*
** Author(s)      :  Yehia Arafa (yarafa@nmsu.edu) 
** 
** File           :  nonOpt_pipeline_temp.ptx  
** 
** Description    :  Instructions Microbenchmarks written in PTX 
** 
** Paper          :  Y. Arafa et al., "Verified Instruction-Level Energy Consumption 
**                                      Measurement for NVIDIA GPUs," CF'20 
** 
** Notes          :  This file is used with the non-optimized (-O)) nvcc compiler flag              
**
** Addendum       : Modified by Gustavo Diaz Galeas
*/


.version 7.6
.target sm_75
.address_size 64


//--------------------------Ovhd--------------------------//

	// .globl	_Z4OvhdPi
.visible .entry _Z4OvhdPi(
	.param .u64 _Z4OvhdPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64 	%rd1, [_Z4OvhdPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;

    add.s32         %r5, %r4, %r3;
    add.s32         %r7, %r5, 2;
    
    mov.u32 	    %r79, -1000000;
      
BB0_1:

    add.u32 	    %r79, %r79, 1;
	setp.ne.s32	    %p1, %r79, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r79;
    st.global.u32   [%rd4 + 8], %r79;

    ret;
}

//--------------------------Add--------------------------//

	// .globl	_Z3AddPi
.visible .entry _Z3AddPi(
	.param .u64 _Z3AddPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64 	%rd1, [_Z3AddPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;

    add.s32         %r5, %r4, %r3;
    add.s32         %r7, %r5, 2;
    
    mov.u32 	    %r79, -1000000;
      
BB0_1:

    add.u32         %r9, %r3, %r7;
    add.u32         %r10, %r7, %r9;
    add.u32         %r11, %r9, %r10;
    add.u32         %r12, %r10, %r11;
    add.u32         %r13, %r11, %r12;
    add.u32         %r14, %r12, %r13;
    add.u32         %r15, %r13, %r14;
    add.u32         %r16, %r14, %r15;
    add.u32         %r17, %r15, %r16;
    add.u32         %r18, %r16, %r17;
    add.u32         %r19, %r17, %r18;
    add.u32         %r20, %r18, %r19;
    add.u32         %r21, %r19, %r20;
    add.u32         %r22, %r20, %r21;
    add.u32         %r23, %r21, %r22;
    add.u32         %r24, %r22, %r23;
    add.u32         %r25, %r23, %r24;
    add.u32         %r26, %r24, %r25;
    add.u32         %r27, %r25, %r26;
    add.u32         %r28, %r26, %r27;

    add.u32 	    %r79, %r79, 1;
	setp.ne.s32	    %p1, %r79, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r79;
    st.global.u32   [%rd4 + 8], %r28;

    ret;
}


//--------------------------Mul--------------------------//

	// .globl	_Z3MulPi
.visible .entry _Z3MulPi(
	.param .u64 _Z3MulPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64    %rd1, [_Z3MulPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;

    add.s32         %r5, %r4, %r3;
    add.s32         %r7, %r5, 2;
    
    mov.u32 	    %r79, -1000000;
  
BB0_1:

    mul.lo.u32         %r9, %r7, %r3;
    mul.lo.u32         %r10, %r3, %r9;
    mul.lo.u32         %r11, %r9, %r10;
    mul.lo.u32         %r12, %r10, %r11;
    mul.lo.u32         %r13, %r11, %r12;
    mul.lo.u32         %r14, %r12, %r13;
    mul.lo.u32         %r15, %r13, %r14;
    mul.lo.u32         %r16, %r14, %r15;
    mul.lo.u32         %r17, %r15, %r16;
    mul.lo.u32         %r18, %r16, %r17;
    mul.lo.u32         %r19, %r17, %r18;
    mul.lo.u32         %r20, %r18, %r19;
    mul.lo.u32         %r21, %r19, %r20;
    mul.lo.u32         %r22, %r20, %r21;
    mul.lo.u32         %r23, %r21, %r22;
    mul.lo.u32         %r24, %r22, %r23;
    mul.lo.u32         %r25, %r23, %r24;
    mul.lo.u32         %r26, %r24, %r25;
    mul.lo.u32         %r27, %r25, %r26;
    mul.lo.u32         %r28, %r26, %r27;
  
    add.u32 	    %r79, %r79, 1;
	setp.ne.s32	    %p1, %r79, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r79;
    st.global.u32   [%rd4 + 8], %r28;

    ret;
}


//--------------------------Div--------------------------//

	// .globl	_Z3DivPi
.visible .entry _Z3DivPi(
	.param .u64 _Z3DivPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64    %rd1, [_Z3DivPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;

    add.s32         %r5, %r4, %r3;
    add.s32         %r7, %r5, 2;
    
    mov.u32 	    %r79, -1000000;

BB0_1:
    mov.u32         %r1, %clock;

    div.s32         %r9, %r7, %r3;
    div.s32         %r10, %r3, %r9;
    div.s32         %r11, %r9, %r10;
    div.s32         %r12, %r10, %r11;
    div.s32         %r13, %r11, %r12;
    div.s32         %r14, %r12, %r13;
    div.s32         %r15, %r13, %r14;
    div.s32         %r16, %r14, %r15;
    div.s32         %r17, %r15, %r16;
    div.s32         %r18, %r16, %r17;
    div.s32         %r19, %r17, %r18;
    div.s32         %r20, %r18, %r19;
    div.s32         %r21, %r19, %r20;
    div.s32         %r22, %r20, %r21;
    div.s32         %r23, %r21, %r22;
    div.s32         %r24, %r22, %r23;
    div.s32         %r25, %r23, %r24;
    div.s32         %r26, %r24, %r25;
    div.s32         %r27, %r25, %r26;
    div.s32         %r28, %r26, %r27;
   
    add.u32 	    %r79, %r79, 1;
	setp.ne.s32	    %p1, %r79, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r79;
    st.global.u32   [%rd4 + 8], %r28;

    ret;
}


//--------------------------DivU--------------------------//

	// .globl	_Z4DivUPi
.visible .entry _Z4DivUPi(
	.param .u64 _Z4DivUPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64    %rd1, [_Z4DivUPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;

    add.s32         %r5, %r4, %r3;
    add.s32         %r7, %r5, 2;
    
    mov.u32 	    %r79, -1000000;

BB0_1:

    div.u32         %r9, %r7, %r3;
    div.u32         %r10, %r3, %r9;
    div.u32         %r11, %r9, %r10;
    div.u32         %r12, %r10, %r11;
    div.u32         %r13, %r11, %r12;
    div.u32         %r14, %r12, %r13;
    div.u32         %r15, %r13, %r14;
    div.u32         %r16, %r14, %r15;
    div.u32         %r17, %r15, %r16;
    div.u32         %r18, %r16, %r17;
    div.u32         %r19, %r17, %r18;
    div.u32         %r20, %r18, %r19;
    div.u32         %r21, %r19, %r20;
    div.u32         %r22, %r20, %r21;
    div.u32         %r23, %r21, %r22;
    div.u32         %r24, %r22, %r23;
    div.u32         %r25, %r23, %r24;
    div.u32         %r26, %r24, %r25;
    div.u32         %r27, %r25, %r26;
    div.u32         %r28, %r26, %r27;

    add.u32 	    %r79, %r79, 1;
	setp.ne.s32	    %p1, %r79, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r79;
    st.global.u32   [%rd4 + 8], %r28;

    ret;
}

//--------------------------Load-------------------------//

	// .globl	_Z3LdPi
.visible .entry _Z3LdPi(
	.param .u64 _Z3LdPi_param_0
)
{
    .reg .b32   %r<20>;
    .reg .b64   %rd<100>;
    .reg .pred 	%p<2>;

    ld.param.cv.u64    %rd1, [_Z3LdPi_param_0];
    cvta.to.global.u64 %rd4, %rd1;

    mov.u64         %rd5, 3;
    mov.u64         %rd6, 4;

    add.s64         %rd7, %rd5, %rd6;
    add.s64         %rd8, %rd7, 2;
    
    mov.u32 	    %r19, -1000000;
      
BB0_1:

    mov.u32         %r1, %clock;

    ld.global.cv.u64       %rd9, [%rd4 + 12];
    add.u64         %rd10, %rd9, %rd8;
    st.global.wt.u64       [%rd4 + 12], %rd10;

    //ld.cv.u64       %rd10, [%rd4 + 12];

//    ld.cv.u64       %rd11, [%rd10];
    //add.u64         %rd12, %rd11, %rd10;
    //ld.cv.u64       %rd13, [%rd12];
    //add.u64         %rd14, %rd13, %rd12;
    //ld.cv.u64       %rd15, [%rd14];
    //add.u64         %rd16, %rd15, %rd14;
    //ld.cv.u64       %rd17, [%rd16];
    //add.u64         %rd18, %rd17, %rd16;


    //ld.cv.u64       %rd11, [%rd10];
    //ld.cv.u64       %rd12, [%rd11];
    //ld.cv.u64       %rd13, [%rd12];
    //ld.cv.u64       %rd14, [%rd13];
    //ld.cv.u64       %rd15, [%rd14];
    //ld.cv.u64       %rd16, [%rd15];
    //ld.cv.u64       %rd17, [%rd16];
    //ld.cv.u64       %rd18, [%rd17];

    add.u32 	    %r19, %r19, 1;
	setp.ne.s32	    %p1, %r19, 0;
	@%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r19;
    cvt.u32.u64     %r18, %rd18;
    st.global.u32   [%rd4 + 8], %r18;

    ret;
}
